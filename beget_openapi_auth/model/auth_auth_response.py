# coding: utf-8

"""
    API Аутентификации

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.1.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from beget_openapi_auth import schemas  # noqa: F401


class AuthAuthResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            token = schemas.StrSchema
            
            
            class error(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'enum'
                    enum_value_to_name = {
                        "INTERNAL_ERROR": "INTERNAL_ERROR",
                        "EMPTY_LOGIN": "EMPTY_LOGIN",
                        "EMPTY_PASSWORD": "EMPTY_PASSWORD",
                        "INCORRECT_CREDENTIALS": "INCORRECT_CREDENTIALS",
                        "IP_BLOCKED": "IP_BLOCKED",
                        "CODE_REQUIRED": "CODE_REQUIRED",
                        "INCORRECT_CODE": "INCORRECT_CODE",
                        "CODE_SENT_LIMIT": "CODE_SENT_LIMIT",
                        "CODE_INPUT_LIMIT": "CODE_INPUT_LIMIT",
                        "ACCOUNT_ON_MAINTANCE": "ACCOUNT_ON_MAINTANCE",
                        "ACCOUNT_DELETED": "ACCOUNT_DELETED",
                        "CODE_REQUIRED_EMAIL": "CODE_REQUIRED_EMAIL",
                        "CODE_REQUIRED_SMS": "CODE_REQUIRED_SMS",
                    }
                
                @schemas.classproperty
                def INTERNAL_ERROR(cls):
                    return cls("INTERNAL_ERROR")
                
                @schemas.classproperty
                def EMPTY_LOGIN(cls):
                    return cls("EMPTY_LOGIN")
                
                @schemas.classproperty
                def EMPTY_PASSWORD(cls):
                    return cls("EMPTY_PASSWORD")
                
                @schemas.classproperty
                def INCORRECT_CREDENTIALS(cls):
                    return cls("INCORRECT_CREDENTIALS")
                
                @schemas.classproperty
                def IP_BLOCKED(cls):
                    return cls("IP_BLOCKED")
                
                @schemas.classproperty
                def CODE_REQUIRED(cls):
                    return cls("CODE_REQUIRED")
                
                @schemas.classproperty
                def INCORRECT_CODE(cls):
                    return cls("INCORRECT_CODE")
                
                @schemas.classproperty
                def CODE_SENT_LIMIT(cls):
                    return cls("CODE_SENT_LIMIT")
                
                @schemas.classproperty
                def CODE_INPUT_LIMIT(cls):
                    return cls("CODE_INPUT_LIMIT")
                
                @schemas.classproperty
                def ACCOUNT_ON_MAINTANCE(cls):
                    return cls("ACCOUNT_ON_MAINTANCE")
                
                @schemas.classproperty
                def ACCOUNT_DELETED(cls):
                    return cls("ACCOUNT_DELETED")
                
                @schemas.classproperty
                def CODE_REQUIRED_EMAIL(cls):
                    return cls("CODE_REQUIRED_EMAIL")
                
                @schemas.classproperty
                def CODE_REQUIRED_SMS(cls):
                    return cls("CODE_REQUIRED_SMS")
            __annotations__ = {
                "token": token,
                "error": error,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token"]) -> MetaOapg.properties.token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["token", "error", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token"]) -> typing.Union[MetaOapg.properties.token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> typing.Union[MetaOapg.properties.error, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["token", "error", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        token: typing.Union[MetaOapg.properties.token, str, schemas.Unset] = schemas.unset,
        error: typing.Union[MetaOapg.properties.error, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AuthAuthResponse':
        return super().__new__(
            cls,
            *args,
            token=token,
            error=error,
            _configuration=_configuration,
            **kwargs,
        )
